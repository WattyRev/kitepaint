// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LogInForm renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogInForm
    id="abc"
    onPasswordChange={[MockFunction]}
    onRegister={[MockFunction]}
    onResetPassword={[MockFunction]}
    onSubmit={[MockFunction]}
    onUsernameChange={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ForwardRef
          htmlFor="abc-username"
        >
          Username
        </ForwardRef>,
        <Input
          id="abc-username"
          onChange={[Function]}
        />,
        <ForwardRef
          htmlFor="abc-password"
        >
          Password
        </ForwardRef>,
        <Input
          id="abc-password"
          onChange={[Function]}
          type="password"
        />,
        <Button
          isBlock={true}
          isPrimary={true}
          type="submit"
        >
          Sign In
        </Button>,
        <P>
          <ForwardRef
            onClick={[MockFunction]}
          >
            Lost your password?
          </ForwardRef>
        </P>,
        <P>
          <ForwardRef
            onClick={[MockFunction]}
          >
            Register
          </ForwardRef>
        </P>,
      ],
      "id": "abc",
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Username",
          "htmlFor": "abc-username",
        },
        "ref": null,
        "rendered": "Username",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": true,
            "rules": Array [
              "
  margin: 8px 0 4px;
  display: block;
",
            ],
          },
          "displayName": "Styled(Label)",
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "disabled": undefined,
          "id": "abc-username",
          "onChange": [Function],
          "value": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Password",
          "htmlFor": "abc-password",
        },
        "ref": null,
        "rendered": "Password",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": true,
            "rules": Array [
              "
  margin: 8px 0 4px;
  display: block;
",
            ],
          },
          "displayName": "Styled(Label)",
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "disabled": undefined,
          "id": "abc-password",
          "onChange": [Function],
          "type": "password",
          "value": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Sign In",
          "disabled": undefined,
          "isBlock": true,
          "isPrimary": true,
          "type": "submit",
        },
        "ref": null,
        "rendered": "Sign In",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ForwardRef
            onClick={[MockFunction]}
          >
            Lost your password?
          </ForwardRef>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Lost your password?",
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": "Lost your password?",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": false,
              "rules": Array [
                "
  color: ",
                [Function],
                ";
  text-decoration: none;
  margin: 0;
  cursor: pointer;

  &:hover {
    text-decoration: underline;
  }
",
              ],
            },
            "displayName": "Styled(A)",
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ForwardRef
            onClick={[MockFunction]}
          >
            Register
          </ForwardRef>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Register",
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": "Register",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": false,
              "rules": Array [
                "
  color: ",
                [Function],
                ";
  text-decoration: none;
  margin: 0;
  cursor: pointer;

  &:hover {
    text-decoration: underline;
  }
",
              ],
            },
            "displayName": "Styled(A)",
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        "type": [Function],
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ForwardRef
            htmlFor="abc-username"
          >
            Username
          </ForwardRef>,
          <Input
            id="abc-username"
            onChange={[Function]}
          />,
          <ForwardRef
            htmlFor="abc-password"
          >
            Password
          </ForwardRef>,
          <Input
            id="abc-password"
            onChange={[Function]}
            type="password"
          />,
          <Button
            isBlock={true}
            isPrimary={true}
            type="submit"
          >
            Sign In
          </Button>,
          <P>
            <ForwardRef
              onClick={[MockFunction]}
            >
              Lost your password?
            </ForwardRef>
          </P>,
          <P>
            <ForwardRef
              onClick={[MockFunction]}
            >
              Register
            </ForwardRef>
          </P>,
        ],
        "id": "abc",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Username",
            "htmlFor": "abc-username",
          },
          "ref": null,
          "rendered": "Username",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": true,
              "rules": Array [
                "
  margin: 8px 0 4px;
  display: block;
",
              ],
            },
            "displayName": "Styled(Label)",
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "disabled": undefined,
            "id": "abc-username",
            "onChange": [Function],
            "value": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Password",
            "htmlFor": "abc-password",
          },
          "ref": null,
          "rendered": "Password",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": true,
              "rules": Array [
                "
  margin: 8px 0 4px;
  display: block;
",
              ],
            },
            "displayName": "Styled(Label)",
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "disabled": undefined,
            "id": "abc-password",
            "onChange": [Function],
            "type": "password",
            "value": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Sign In",
            "disabled": undefined,
            "isBlock": true,
            "isPrimary": true,
            "type": "submit",
          },
          "ref": null,
          "rendered": "Sign In",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef
              onClick={[MockFunction]}
            >
              Lost your password?
            </ForwardRef>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Lost your password?",
              "onClick": [MockFunction],
            },
            "ref": null,
            "rendered": "Lost your password?",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  ";
  text-decoration: none;
  margin: 0;
  cursor: pointer;

  &:hover {
    text-decoration: underline;
  }
",
                ],
              },
              "displayName": "Styled(A)",
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef
              onClick={[MockFunction]}
            >
              Register
            </ForwardRef>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Register",
              "onClick": [MockFunction],
            },
            "ref": null,
            "rendered": "Register",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  ";
  text-decoration: none;
  margin: 0;
  cursor: pointer;

  &:hover {
    text-decoration: underline;
  }
",
                ],
              },
              "displayName": "Styled(A)",
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          "type": [Function],
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
