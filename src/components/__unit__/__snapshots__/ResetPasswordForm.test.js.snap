// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResetPasswordForm renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ResetPasswordForm
    id="abc"
    onCancel={[MockFunction]}
    onEmailChange={[MockFunction]}
    onSubmit={[MockFunction]}
    onUsernameChange={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <React.Fragment>
        <P>
          Enter your username and email address to reset your password.
        </P>
        <ForwardRef
          htmlFor="abc-username"
        >
          Username
           
          <Tooltip
            fadeSpeedMs={250}
          >
            Usernames may be between 3-30 characters.
            <br />
            They may include these characters: a-z, A-Z, 0-9.
          </Tooltip>
        </ForwardRef>
        <ForwardRef
          id="abc-username"
          onChange={[Function]}
        />
        <ForwardRef
          htmlFor="abc-email"
        >
          Email Address
        </ForwardRef>
        <ForwardRef
          id="abc-email"
          onChange={[Function]}
          type="email"
        />
        <Button
          isBlock={true}
          isPrimary={true}
          type="submit"
        >
          Reset Password
        </Button>
        <P>
          <ForwardRef
            className="testing_cancel"
            onClick={[MockFunction]}
          >
            Cancel
          </ForwardRef>
        </P>
      </React.Fragment>,
      "id": "abc",
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          undefined,
          <P>
            Enter your username and email address to reset your password.
          </P>,
          <ForwardRef
            htmlFor="abc-username"
          >
            Username
             
            <Tooltip
              fadeSpeedMs={250}
            >
              Usernames may be between 3-30 characters.
              <br />
              They may include these characters: a-z, A-Z, 0-9.
            </Tooltip>
          </ForwardRef>,
          <ForwardRef
            id="abc-username"
            onChange={[Function]}
          />,
          <ForwardRef
            htmlFor="abc-email"
          >
            Email Address
          </ForwardRef>,
          <ForwardRef
            id="abc-email"
            onChange={[Function]}
            type="email"
          />,
          <Button
            isBlock={true}
            isPrimary={true}
            type="submit"
          >
            Reset Password
          </Button>,
          <P>
            <ForwardRef
              className="testing_cancel"
              onClick={[MockFunction]}
            >
              Cancel
            </ForwardRef>
          </P>,
        ],
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Enter your username and email address to reset your password.",
          },
          "ref": null,
          "rendered": "Enter your username and email address to reset your password.",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              "Username",
              " ",
              <Tooltip
                fadeSpeedMs={250}
              >
                Usernames may be between 3-30 characters.
                <br />
                They may include these characters: a-z, A-Z, 0-9.
              </Tooltip>,
            ],
            "htmlFor": "abc-username",
          },
          "ref": null,
          "rendered": Array [
            "Username",
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  "Usernames may be between 3-30 characters.",
                  <br />,
                  "They may include these characters: a-z, A-Z, 0-9.",
                ],
                "fadeSpeedMs": 250,
              },
              "ref": null,
              "rendered": Array [
                "Usernames may be between 3-30 characters.",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                "They may include these characters: a-z, A-Z, 0-9.",
              ],
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-gZMcBi",
              "isStatic": true,
              "rules": Array [
                "
  margin: 8px 0 4px;
  display: block;
",
              ],
            },
            "displayName": "Styled(Label)",
            "render": [Function],
            "styledComponentId": "sc-gZMcBi",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "disabled": undefined,
            "id": "abc-username",
            "onChange": [Function],
            "value": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\",
    \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
",
                " display: block;
  width: 100%;
  padding: 4px;
  border-radius: 4px;
  border: 1px solid ",
                [Function],
                ";
  box-sizing: border-box;
",
              ],
            },
            "displayName": "styled.input",
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "input",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Email Address",
            "htmlFor": "abc-email",
          },
          "ref": null,
          "rendered": "Email Address",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-gZMcBi",
              "isStatic": true,
              "rules": Array [
                "
  margin: 8px 0 4px;
  display: block;
",
              ],
            },
            "displayName": "Styled(Label)",
            "render": [Function],
            "styledComponentId": "sc-gZMcBi",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "disabled": undefined,
            "id": "abc-email",
            "onChange": [Function],
            "type": "email",
            "value": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\",
    \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
",
                " display: block;
  width: 100%;
  padding: 4px;
  border-radius: 4px;
  border: 1px solid ",
                [Function],
                ";
  box-sizing: border-box;
",
              ],
            },
            "displayName": "styled.input",
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "input",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Reset Password",
            "disabled": undefined,
            "isBlock": true,
            "isPrimary": true,
            "type": "submit",
          },
          "ref": null,
          "rendered": "Reset Password",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef
              className="testing_cancel"
              onClick={[MockFunction]}
            >
              Cancel
            </ForwardRef>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Cancel",
              "className": "testing_cancel",
              "onClick": [MockFunction],
            },
            "ref": null,
            "rendered": "Cancel",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  ";
  text-decoration: none;
  margin: 0;
  cursor: pointer;

  &:hover {
    text-decoration: underline;
  }
",
                ],
              },
              "displayName": "styled.a",
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "a",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <React.Fragment>
          <P>
            Enter your username and email address to reset your password.
          </P>
          <ForwardRef
            htmlFor="abc-username"
          >
            Username
             
            <Tooltip
              fadeSpeedMs={250}
            >
              Usernames may be between 3-30 characters.
              <br />
              They may include these characters: a-z, A-Z, 0-9.
            </Tooltip>
          </ForwardRef>
          <ForwardRef
            id="abc-username"
            onChange={[Function]}
          />
          <ForwardRef
            htmlFor="abc-email"
          >
            Email Address
          </ForwardRef>
          <ForwardRef
            id="abc-email"
            onChange={[Function]}
            type="email"
          />
          <Button
            isBlock={true}
            isPrimary={true}
            type="submit"
          >
            Reset Password
          </Button>
          <P>
            <ForwardRef
              className="testing_cancel"
              onClick={[MockFunction]}
            >
              Cancel
            </ForwardRef>
          </P>
        </React.Fragment>,
        "id": "abc",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <P>
              Enter your username and email address to reset your password.
            </P>,
            <ForwardRef
              htmlFor="abc-username"
            >
              Username
               
              <Tooltip
                fadeSpeedMs={250}
              >
                Usernames may be between 3-30 characters.
                <br />
                They may include these characters: a-z, A-Z, 0-9.
              </Tooltip>
            </ForwardRef>,
            <ForwardRef
              id="abc-username"
              onChange={[Function]}
            />,
            <ForwardRef
              htmlFor="abc-email"
            >
              Email Address
            </ForwardRef>,
            <ForwardRef
              id="abc-email"
              onChange={[Function]}
              type="email"
            />,
            <Button
              isBlock={true}
              isPrimary={true}
              type="submit"
            >
              Reset Password
            </Button>,
            <P>
              <ForwardRef
                className="testing_cancel"
                onClick={[MockFunction]}
              >
                Cancel
              </ForwardRef>
            </P>,
          ],
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Enter your username and email address to reset your password.",
            },
            "ref": null,
            "rendered": "Enter your username and email address to reset your password.",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "Username",
                " ",
                <Tooltip
                  fadeSpeedMs={250}
                >
                  Usernames may be between 3-30 characters.
                  <br />
                  They may include these characters: a-z, A-Z, 0-9.
                </Tooltip>,
              ],
              "htmlFor": "abc-username",
            },
            "ref": null,
            "rendered": Array [
              "Username",
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    "Usernames may be between 3-30 characters.",
                    <br />,
                    "They may include these characters: a-z, A-Z, 0-9.",
                  ],
                  "fadeSpeedMs": 250,
                },
                "ref": null,
                "rendered": Array [
                  "Usernames may be between 3-30 characters.",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  "They may include these characters: a-z, A-Z, 0-9.",
                ],
                "type": [Function],
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-gZMcBi",
                "isStatic": true,
                "rules": Array [
                  "
  margin: 8px 0 4px;
  display: block;
",
                ],
              },
              "displayName": "Styled(Label)",
              "render": [Function],
              "styledComponentId": "sc-gZMcBi",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "disabled": undefined,
              "id": "abc-username",
              "onChange": [Function],
              "value": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-iwsKbI",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\",
    \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
",
                  " display: block;
  width: 100%;
  padding: 4px;
  border-radius: 4px;
  border: 1px solid ",
                  [Function],
                  ";
  box-sizing: border-box;
",
                ],
              },
              "displayName": "styled.input",
              "render": [Function],
              "styledComponentId": "sc-iwsKbI",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Email Address",
              "htmlFor": "abc-email",
            },
            "ref": null,
            "rendered": "Email Address",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-gZMcBi",
                "isStatic": true,
                "rules": Array [
                  "
  margin: 8px 0 4px;
  display: block;
",
                ],
              },
              "displayName": "Styled(Label)",
              "render": [Function],
              "styledComponentId": "sc-gZMcBi",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "disabled": undefined,
              "id": "abc-email",
              "onChange": [Function],
              "type": "email",
              "value": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-iwsKbI",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\",
    \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
",
                  " display: block;
  width: 100%;
  padding: 4px;
  border-radius: 4px;
  border: 1px solid ",
                  [Function],
                  ";
  box-sizing: border-box;
",
                ],
              },
              "displayName": "styled.input",
              "render": [Function],
              "styledComponentId": "sc-iwsKbI",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Reset Password",
              "disabled": undefined,
              "isBlock": true,
              "isPrimary": true,
              "type": "submit",
            },
            "ref": null,
            "rendered": "Reset Password",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef
                className="testing_cancel"
                onClick={[MockFunction]}
              >
                Cancel
              </ForwardRef>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Cancel",
                "className": "testing_cancel",
                "onClick": [MockFunction],
              },
              "ref": null,
              "rendered": "Cancel",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "rules": Array [
                    "
  color: ",
                    [Function],
                    ";
  text-decoration: none;
  margin: 0;
  cursor: pointer;

  &:hover {
    text-decoration: underline;
  }
",
                  ],
                },
                "displayName": "styled.a",
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "a",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            "type": [Function],
          },
        ],
        "type": Symbol(react.fragment),
      },
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
